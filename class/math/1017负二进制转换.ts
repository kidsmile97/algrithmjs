/**
1017. 负二进制转换

给你一个整数 n ，以二进制字符串的形式返回该整数的 负二进制（base -2）表示。

注意，除非字符串就是 "0"，否则返回的字符串中不能含有前导零。

示例：
n = 2 => "110"

2 = (-2)^2 + (-2)^1

## 分析

对于 x 进制，第 n 位值转换为 10 进制有 x^(n - 1)

这种规则下，负数进制在 (n - 1) % 2 = 0 时为正数，其余为负数

## 从进制转换开始思考

10进制 =》 2进制

算法数学分析

假设有 n = X(1) X(2) X(3) X(4) ... X(n)，其中 X(n) 表示对应位上 2 进制的数字

1. 从最后一位算起，因为最后一位肯定是无法 满 2 进位的余数，X(n) = n % 2 可得
2. 则倒数第二位也是无法 满 k 进位的余数，这个 k 对于10进制而言，应该为 2^2 = 4
- 3 =》11
- 4 =》100

X(n-1) = (n - X(n)) % 2^2
X(n-2) = (n - X(n) - X(n-1)) % 2^3
...

以 13 为例

13 / 2 = 6....1（末位）
(13 - 1) / 2 / 2 = 6 / 2 = 3....0
(13 - 1 - 0) / 2 / 2 / 2 = 3 / 2 = 1....1
(13 - 1 - 0 - 1) / 2 / 2 / 2 / 2 = 1 / 2 = 0....1（首位）

=》1101

10进制转其它进制同理不再赘述

## 负数进制的一些特别之处

从后往前看
1. 除了第一位数字代表负数，其余奇数位代表的都是正数，偶数位代表的都是负数

比如在第 n 位代表的10进制大小为 x^(n - 1)

所以对于 -x 进制的数来说，总是有

n = - a - b + c - d + e (a、b、c ... 代表从末位开始转换成 10 进制后的数)

总是加减加减成对出现，如何转换呢？

## 从 10进制 到 2进制 转换可知，本质是计算余数的计算游戏

同理负进制一样，只需要多考虑符号问题即可，由此可得

tips：在 JavaScript 环境，% 取余会往余数为正数边靠，不同编程语言的实现是可能不一样的

13 % -2 = -7 ... 1

 */

function baseNeg2(n: number): string {
	let ans = '';
	let num = n;
	do {
		// num & 1 与运算求余数，仅仅是因为这里是 2 进制才能使用，末位 0 余数 0，末位 1 余数 1
		ans = (num & 1) + ans;
		num = -(num >> 1);
	} while (num);
	return ans;
}

export default baseNeg2;
