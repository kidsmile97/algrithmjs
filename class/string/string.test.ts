import longestAwesome from './1542.找出最长的超赞子字符串';
import maximumLength from './2981.找出出现至少三次的最长特殊子字符串I';
import removeDuplicateLetters from './316去除重复字母';
import maxNumber from './321拼接最大数';

test('316 去除重复字母', () => {
	expect(removeDuplicateLetters('bcabc')).toEqual('abc');
	expect(removeDuplicateLetters('cbacdcbc')).toEqual('acdb');
	expect(removeDuplicateLetters('bbcaac')).toEqual('bac');
});

test('321 拼接最大数', () => {
	expect(maxNumber([7, 6, 1, 9, 3, 2, 3, 1, 1], [4, 0, 9, 9, 0, 5, 5, 4, 7], 9)).toEqual([9, 9, 9, 7, 3, 2, 3, 1, 1]);
	expect(maxNumber([6, 7], [6, 0, 4], 5)).toEqual([6, 7, 6, 0, 4]);
	expect(maxNumber([3, 4, 6, 5], [9, 1, 2, 5, 8, 3], 5)).toEqual([9, 8, 6, 5, 3]);
});

test('1542. 找出最长的超赞子字符串', () => {
	expect(
		longestAwesome(
			'90000000000000000000000000000000' +
				'0000000000000000000000000000000000' +
				'00000000000000000000000000000000011' +
				'111111111111111111111111111111111111' +
				'11111111111111111111111111111111111111' +
				'111111111111111111111112222222222222222' +
				'2222222222222222222222222222222222222222' +
				'222222222222222222222222222222222222222222' +
				'23333333333333333333333333333333333333333333' +
				'33333333333333333333333333333333333333333333' +
				'333333333333444444444444444444444444444444444' +
				'4444444444444444444444444444444444444444444444' +
				'44444444444444444444555555555555555555555555555' +
				'555555555555555555555555555555555555555555555555' +
				'5555555555555555555555556666666666666666666666666' +
				'666666666666666666666666666666666666666666666666' +
				'6666666666666666666666666677777777777777777777777' +
				'77777777777777777777777777777777777777777777777777' +
				'777777777777777777777777778888888888888888888888888' +
				'888888888888888888888888888888888888888888888888888' +
				'88888888888888888888888999999999999999999999999999999' +
				'999999999999999999999999999999999999999999999999999999999999999999999',
		),
	).toBe(1000);
});

test('2981. 找出出现至少三次的最长特殊子字符串 I', () => {
	// expect(maximumLength('aaaa')).toBe(2);
	// expect(maximumLength('abcccccdddd')).toBe(3);
	expect(maximumLength('aabcaaa')).toBe(2);
});
